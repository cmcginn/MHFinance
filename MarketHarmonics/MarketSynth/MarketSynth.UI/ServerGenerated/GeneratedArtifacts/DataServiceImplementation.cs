//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketSynthDomainServiceDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::MarketSynthDomainServiceData.Implementation.MarketSynthDomainServiceDataObjectContext>
    {
    
        public MarketSynthDomainServiceDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region MarketData
    
        public void InsertMarketData(global::MarketSynthDomainServiceData.Implementation.MarketData entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.MarketDatas.AddObject(entity);
            }
        }
    
        public void UpdateMarketData(global::MarketSynthDomainServiceData.Implementation.MarketData currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.MarketDatas, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteMarketData(global::MarketSynthDomainServiceData.Implementation.MarketData entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.MarketDatas.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Indicator
    
        public void InsertIndicator(global::MarketSynthDomainServiceData.Implementation.Indicator entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Indicators.AddObject(entity);
            }
        }
    
        public void UpdateIndicator(global::MarketSynthDomainServiceData.Implementation.Indicator currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Indicators, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteIndicator(global::MarketSynthDomainServiceData.Implementation.Indicator entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Indicators.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Study
    
        public void InsertStudy(global::MarketSynthDomainServiceData.Implementation.Study entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Studies.AddObject(entity);
            }
        }
    
        public void UpdateStudy(global::MarketSynthDomainServiceData.Implementation.Study currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Studies, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteStudy(global::MarketSynthDomainServiceData.Implementation.Study entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Studies.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region StudyIndicator
    
        public void InsertStudyIndicator(global::MarketSynthDomainServiceData.Implementation.StudyIndicator entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.StudyIndicators.AddObject(entity);
            }
        }
    
        public void UpdateStudyIndicator(global::MarketSynthDomainServiceData.Implementation.StudyIndicator currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.StudyIndicators, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteStudyIndicator(global::MarketSynthDomainServiceData.Implementation.StudyIndicator entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.StudyIndicators.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> GetMarketDataBySymbol(string frameworkOperators, string symbol)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("GetMarketDataBySymbol", frameworkOperators, symbol);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> MarketDatas_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("MarketDatas_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> MarketDatas_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("MarketDatas_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> MarketDatas_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("MarketDatas_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> Indicators_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Indicator>("Indicators_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> Indicators_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Indicator>("Indicators_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> Indicators_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Indicator>("Indicators_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> Studies_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Study>("Studies_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> Studies_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Study>("Studies_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> Studies_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Study>("Studies_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> StudyIndicators_Single(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("StudyIndicators_Single", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> StudyIndicators_SingleOrDefault(string frameworkOperators, global::System.Nullable<global::System.Guid> Id)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("StudyIndicators_SingleOrDefault", frameworkOperators, Id);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> StudyIndicators_All(string frameworkOperators)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("StudyIndicators_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> GetStudyIndicator(string frameworkOperators, string instrument, string indicator)
        {
            return this.GetQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("GetStudyIndicator", frameworkOperators, instrument, indicator);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().MarketSynthDomainServiceData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MarketSynthDomainServiceDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.RiaDataServiceImplementation<global::MarketSynthDomainServiceData.Implementation.MarketSynthDomainServiceDataObjectContext, global::MarketSynth.Services.MarketSynthDomainService>
    {
        public MarketSynthDomainServiceDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> GetMarketDataBySymbol(string symbol)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> query;
            query = base.CreateQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("GetMarketDataBySymbol", symbol).AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> MarketDatas_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("MarketDatas_All"),
                (m) => (Id.HasValue && (m.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> MarketDatas_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("MarketDatas_All"),
                (m) => (Id.HasValue && (m.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> MarketDatas_All()
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.MarketData> query;
            query = base.CreateQuery<global::MarketSynthDomainServiceData.Implementation.MarketData>("GetMarketData").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> Indicators_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Indicator>("Indicators_All"),
                (i) => (Id.HasValue && (i.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> Indicators_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Indicator>("Indicators_All"),
                (i) => (Id.HasValue && (i.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> Indicators_All()
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Indicator> query;
            query = base.CreateQuery<global::MarketSynthDomainServiceData.Implementation.Indicator>("GetIndicators").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> Studies_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Study>("Studies_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> Studies_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.Study>("Studies_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> Studies_All()
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.Study> query;
            query = base.CreateQuery<global::MarketSynthDomainServiceData.Implementation.Study>("GetStudies").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> StudyIndicators_Single(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("StudyIndicators_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> StudyIndicators_SingleOrDefault(global::System.Nullable<global::System.Guid> Id)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("StudyIndicators_All"),
                (s) => (Id.HasValue && (s.Id == Id)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> StudyIndicators_All()
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> query;
            query = base.CreateQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("GetStudyIndicators").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> GetStudyIndicator(string instrument, string indicator)
        {
            global::System.Linq.IQueryable<global::MarketSynthDomainServiceData.Implementation.StudyIndicator> query;
            query = base.CreateQuery<global::MarketSynthDomainServiceData.Implementation.StudyIndicator>("GetStudyIndicator", instrument, indicator).AsQueryable();
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::MarketSynthDomainServiceData.Implementation.MarketData))
            {
                return new global::MarketSynthDomainServiceData.Implementation.MarketData();
            }
            if (type == typeof(global::MarketSynthDomainServiceData.Implementation.Indicator))
            {
                return new global::MarketSynthDomainServiceData.Implementation.Indicator();
            }
            if (type == typeof(global::MarketSynthDomainServiceData.Implementation.Study))
            {
                return new global::MarketSynthDomainServiceData.Implementation.Study();
            }
            if (type == typeof(global::MarketSynthDomainServiceData.Implementation.StudyIndicator))
            {
                return new global::MarketSynthDomainServiceData.Implementation.StudyIndicator();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::MarketSynthDomainServiceData.Implementation.MarketSynthDomainServiceDataObjectContext CreateObjectContext()
        {
            return new global::MarketSynthDomainServiceData.Implementation.MarketSynthDomainServiceDataObjectContext(base.GetEntityConnectionString(
                "MarketSynthDomainServiceData", 
                "res://*/MarketSynthDomainServiceData.csdl|res://*/MarketSynthDomainServiceData.ssdl|res://*/MarketSynthDomainServiceData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.MarketData))
            {
                return new global::MarketSynthDomainServiceData.Implementation.MarketData();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Indicator))
            {
                return new global::MarketSynthDomainServiceData.Implementation.Indicator();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Study))
            {
                return new global::MarketSynthDomainServiceData.Implementation.Study();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.StudyIndicator))
            {
                return new global::MarketSynthDomainServiceData.Implementation.StudyIndicator();
            }
            return null;
        }
        protected override global::System.Type ConvertType(global::System.Type outerType)
        {
            if (outerType == typeof(global::MarketSynthDomainServiceData.Implementation.MarketData))
            {
                return typeof(global::MarketSynth.Services.MarketData);
            }
            if (outerType == typeof(global::MarketSynthDomainServiceData.Implementation.Indicator))
            {
                return typeof(global::MarketSynth.Services.Indicator);
            }
            if (outerType == typeof(global::MarketSynthDomainServiceData.Implementation.Study))
            {
                return typeof(global::MarketSynth.Services.Study);
            }
            if (outerType == typeof(global::MarketSynthDomainServiceData.Implementation.StudyIndicator))
            {
                return typeof(global::MarketSynth.Services.StudyIndicator);
            }
            return base.ConvertType(outerType);
        }
        protected override object ConvertEntity(object outerEntity)
        {
            global::MarketSynthDomainServiceData.Implementation.MarketData marketData = outerEntity as global::MarketSynthDomainServiceData.Implementation.MarketData;
            if (marketData != null)
            {
                global::MarketSynth.Services.MarketData result = new global::MarketSynth.Services.MarketData();
                result.Id = marketData.Id;
                result.MarketDate = marketData.MarketDate;
                result.Open = marketData.Open;
                result.Close = marketData.Close;
                result.High = marketData.High;
                result.Low = marketData.Low;
                result.Volume = marketData.Volume;
                return result;
            }
            global::MarketSynthDomainServiceData.Implementation.Indicator indicator = outerEntity as global::MarketSynthDomainServiceData.Implementation.Indicator;
            if (indicator != null)
            {
                global::MarketSynth.Services.Indicator result = new global::MarketSynth.Services.Indicator();
                result.Id = indicator.Id;
                result.Name = indicator.Name;
                return result;
            }
            global::MarketSynthDomainServiceData.Implementation.Study study = outerEntity as global::MarketSynthDomainServiceData.Implementation.Study;
            if (study != null)
            {
                global::MarketSynth.Services.Study result = new global::MarketSynth.Services.Study();
                result.Id = study.Id;
                result.InstrumentName = study.InstrumentName;
                result.IndicatorId = study.IndicatorId;
                return result;
            }
            global::MarketSynthDomainServiceData.Implementation.StudyIndicator studyIndicator = outerEntity as global::MarketSynthDomainServiceData.Implementation.StudyIndicator;
            if (studyIndicator != null)
            {
                global::MarketSynth.Services.StudyIndicator result = new global::MarketSynth.Services.StudyIndicator();
                result.Id = studyIndicator.Id;
                result.Label = studyIndicator.Label;
                result.PointData = studyIndicator.PointData;
                return result;
            }
            return null;
        }
       
    
        protected override void UpdateResult(object outerEntity, object innerResult)
        {
            global::MarketSynthDomainServiceData.Implementation.MarketData outerMarketData = outerEntity as global::MarketSynthDomainServiceData.Implementation.MarketData;
            global::MarketSynth.Services.MarketData innerMarketData = innerResult as global::MarketSynth.Services.MarketData;
            if ((outerMarketData != null) && (innerMarketData != null))
            {
                outerMarketData.Id = innerMarketData.Id;
                outerMarketData.MarketDate = innerMarketData.MarketDate;
                outerMarketData.Open = innerMarketData.Open;
                outerMarketData.Close = innerMarketData.Close;
                outerMarketData.High = innerMarketData.High;
                outerMarketData.Low = innerMarketData.Low;
                outerMarketData.Volume = innerMarketData.Volume;
                return;
            }
            global::MarketSynthDomainServiceData.Implementation.Indicator outerIndicator = outerEntity as global::MarketSynthDomainServiceData.Implementation.Indicator;
            global::MarketSynth.Services.Indicator innerIndicator = innerResult as global::MarketSynth.Services.Indicator;
            if ((outerIndicator != null) && (innerIndicator != null))
            {
                outerIndicator.Id = innerIndicator.Id;
                outerIndicator.Name = innerIndicator.Name;
                return;
            }
            global::MarketSynthDomainServiceData.Implementation.Study outerStudy = outerEntity as global::MarketSynthDomainServiceData.Implementation.Study;
            global::MarketSynth.Services.Study innerStudy = innerResult as global::MarketSynth.Services.Study;
            if ((outerStudy != null) && (innerStudy != null))
            {
                outerStudy.Id = innerStudy.Id;
                outerStudy.InstrumentName = innerStudy.InstrumentName;
                outerStudy.IndicatorId = innerStudy.IndicatorId;
                return;
            }
            global::MarketSynthDomainServiceData.Implementation.StudyIndicator outerStudyIndicator = outerEntity as global::MarketSynthDomainServiceData.Implementation.StudyIndicator;
            global::MarketSynth.Services.StudyIndicator innerStudyIndicator = innerResult as global::MarketSynth.Services.StudyIndicator;
            if ((outerStudyIndicator != null) && (innerStudyIndicator != null))
            {
                outerStudyIndicator.Id = innerStudyIndicator.Id;
                outerStudyIndicator.Label = innerStudyIndicator.Label;
                outerStudyIndicator.PointData = innerStudyIndicator.PointData;
                return;
            }
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.MarketSynthDomainServiceData))
            {
                return new global::LightSwitchApplication.MarketSynthDomainServiceDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.MarketSynthDomainServiceData))
            {
                return new global::LightSwitchApplication.Implementation.MarketSynthDomainServiceDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.MarketData) == definitionType)
            {
                return typeof(global::MarketSynthDomainServiceData.Implementation.MarketData);
            }
            if (typeof(global::LightSwitchApplication.Indicator) == definitionType)
            {
                return typeof(global::MarketSynthDomainServiceData.Implementation.Indicator);
            }
            if (typeof(global::LightSwitchApplication.Study) == definitionType)
            {
                return typeof(global::MarketSynthDomainServiceData.Implementation.Study);
            }
            if (typeof(global::LightSwitchApplication.StudyIndicator) == definitionType)
            {
                return typeof(global::MarketSynthDomainServiceData.Implementation.StudyIndicator);
            }
            return null;
        }
    }
}

namespace MarketSynthDomainServiceData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class MarketData :
        global::LightSwitchApplication.MarketData.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Indicator :
        global::LightSwitchApplication.Indicator.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Study :
        global::LightSwitchApplication.Study.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class StudyIndicator :
        global::LightSwitchApplication.StudyIndicator.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

