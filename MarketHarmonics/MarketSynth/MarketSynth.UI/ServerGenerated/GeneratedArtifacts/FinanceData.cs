//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("FinanceData", "FK_MarketData_Instrument", "Instrument", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(FinanceData.Implementation.Instrument), "MarketData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(FinanceData.Implementation.MarketData), true)]

#endregion

namespace FinanceData.Implementation
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class FinanceDataObjectContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new FinanceDataObjectContext object using the connection string found in the 'FinanceDataObjectContext' section of the application configuration file.
        /// </summary>
        public FinanceDataObjectContext() : base("name=FinanceDataObjectContext", "FinanceDataObjectContext")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new FinanceDataObjectContext object.
        /// </summary>
        public FinanceDataObjectContext(string connectionString) : base(connectionString, "FinanceDataObjectContext")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new FinanceDataObjectContext object.
        /// </summary>
        public FinanceDataObjectContext(EntityConnection connection) : base(connection, "FinanceDataObjectContext")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Instrument> Instruments
        {
            get
            {
                if ((_Instruments == null))
                {
                    _Instruments = base.CreateObjectSet<Instrument>("Instruments");
                }
                return _Instruments;
            }
        }
        private ObjectSet<Instrument> _Instruments;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MarketData> MarketDatas
        {
            get
            {
                if ((_MarketDatas == null))
                {
                    _MarketDatas = base.CreateObjectSet<MarketData>("MarketDatas");
                }
                return _MarketDatas;
            }
        }
        private ObjectSet<MarketData> _MarketDatas;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Instruments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToInstruments(Instrument instrument)
        {
            base.AddObject("Instruments", instrument);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MarketDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMarketDatas(MarketData marketData)
        {
            base.AddObject("MarketDatas", marketData);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FinanceData", Name="Instrument")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Instrument : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Instrument object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="instrumentName">Initial value of the InstrumentName property.</param>
        /// <param name="symbol">Initial value of the Symbol property.</param>
        public static Instrument CreateInstrument(global::System.Guid id, global::System.String instrumentName, global::System.String symbol)
        {
            Instrument instrument = new Instrument();
            instrument.Id = id;
            instrument.InstrumentName = instrumentName;
            instrument.Symbol = symbol;
            return instrument;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String InstrumentName
        {
            get
            {
                return _InstrumentName;
            }
            set
            {
                OnInstrumentNameChanging(value);
                ReportPropertyChanging("InstrumentName");
                _InstrumentName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("InstrumentName");
                OnInstrumentNameChanged();
            }
        }
        private global::System.String _InstrumentName;
        partial void OnInstrumentNameChanging(global::System.String value);
        partial void OnInstrumentNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Symbol
        {
            get
            {
                return _Symbol;
            }
            set
            {
                OnSymbolChanging(value);
                ReportPropertyChanging("Symbol");
                _Symbol = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Symbol");
                OnSymbolChanged();
            }
        }
        private global::System.String _Symbol;
        partial void OnSymbolChanging(global::System.String value);
        partial void OnSymbolChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FinanceData", "FK_MarketData_Instrument", "MarketData")]
        public EntityCollection<MarketData> MarketDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MarketData>("FinanceData.FK_MarketData_Instrument", "MarketData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MarketData>("FinanceData.FK_MarketData_Instrument", "MarketData", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="FinanceData", Name="MarketData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MarketData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MarketData object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="created">Initial value of the Created property.</param>
        /// <param name="marketOpen">Initial value of the MarketOpen property.</param>
        /// <param name="marketHigh">Initial value of the MarketHigh property.</param>
        /// <param name="marketLow">Initial value of the MarketLow property.</param>
        /// <param name="marketClose">Initial value of the MarketClose property.</param>
        /// <param name="marketVolume">Initial value of the MarketVolume property.</param>
        /// <param name="instrumentId">Initial value of the InstrumentId property.</param>
        public static MarketData CreateMarketData(global::System.Guid id, global::System.DateTime created, global::System.Decimal marketOpen, global::System.Decimal marketHigh, global::System.Decimal marketLow, global::System.Decimal marketClose, global::System.Int64 marketVolume, global::System.Guid instrumentId)
        {
            MarketData marketData = new MarketData();
            marketData.Id = id;
            marketData.Created = created;
            marketData.MarketOpen = marketOpen;
            marketData.MarketHigh = marketHigh;
            marketData.MarketLow = marketLow;
            marketData.MarketClose = marketClose;
            marketData.MarketVolume = marketVolume;
            marketData.InstrumentId = instrumentId;
            return marketData;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Created
        {
            get
            {
                return _Created;
            }
            set
            {
                OnCreatedChanging(value);
                ReportPropertyChanging("Created");
                _Created = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Created");
                OnCreatedChanged();
            }
        }
        private global::System.DateTime _Created;
        partial void OnCreatedChanging(global::System.DateTime value);
        partial void OnCreatedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal MarketOpen
        {
            get
            {
                return _MarketOpen;
            }
            set
            {
                OnMarketOpenChanging(value);
                ReportPropertyChanging("MarketOpen");
                _MarketOpen = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MarketOpen");
                OnMarketOpenChanged();
            }
        }
        private global::System.Decimal _MarketOpen;
        partial void OnMarketOpenChanging(global::System.Decimal value);
        partial void OnMarketOpenChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal MarketHigh
        {
            get
            {
                return _MarketHigh;
            }
            set
            {
                OnMarketHighChanging(value);
                ReportPropertyChanging("MarketHigh");
                _MarketHigh = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MarketHigh");
                OnMarketHighChanged();
            }
        }
        private global::System.Decimal _MarketHigh;
        partial void OnMarketHighChanging(global::System.Decimal value);
        partial void OnMarketHighChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal MarketLow
        {
            get
            {
                return _MarketLow;
            }
            set
            {
                OnMarketLowChanging(value);
                ReportPropertyChanging("MarketLow");
                _MarketLow = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MarketLow");
                OnMarketLowChanged();
            }
        }
        private global::System.Decimal _MarketLow;
        partial void OnMarketLowChanging(global::System.Decimal value);
        partial void OnMarketLowChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal MarketClose
        {
            get
            {
                return _MarketClose;
            }
            set
            {
                OnMarketCloseChanging(value);
                ReportPropertyChanging("MarketClose");
                _MarketClose = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MarketClose");
                OnMarketCloseChanged();
            }
        }
        private global::System.Decimal _MarketClose;
        partial void OnMarketCloseChanging(global::System.Decimal value);
        partial void OnMarketCloseChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 MarketVolume
        {
            get
            {
                return _MarketVolume;
            }
            set
            {
                OnMarketVolumeChanging(value);
                ReportPropertyChanging("MarketVolume");
                _MarketVolume = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MarketVolume");
                OnMarketVolumeChanged();
            }
        }
        private global::System.Int64 _MarketVolume;
        partial void OnMarketVolumeChanging(global::System.Int64 value);
        partial void OnMarketVolumeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid InstrumentId
        {
            get
            {
                return _InstrumentId;
            }
            set
            {
                OnInstrumentIdChanging(value);
                ReportPropertyChanging("InstrumentId");
                _InstrumentId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InstrumentId");
                OnInstrumentIdChanged();
            }
        }
        private global::System.Guid _InstrumentId;
        partial void OnInstrumentIdChanging(global::System.Guid value);
        partial void OnInstrumentIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("FinanceData", "FK_MarketData_Instrument", "Instrument")]
        public Instrument Instrument
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("FinanceData.FK_MarketData_Instrument", "Instrument").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("FinanceData.FK_MarketData_Instrument", "Instrument").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Instrument> InstrumentReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Instrument>("FinanceData.FK_MarketData_Instrument", "Instrument");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Instrument>("FinanceData.FK_MarketData_Instrument", "Instrument", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
