//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MarketHarmonics
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace MarketSynth.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    
    
    /// <summary>
    /// The 'Indicator' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MarketSynth.Services")]
    public sealed partial class Indicator : Entity
    {
        
        private Guid _id;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Indicator"/> class.
        /// </summary>
        public Indicator()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'MarketData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MarketSynth.Services")]
    public sealed partial class MarketData : Entity
    {
        
        private decimal _close;
        
        private decimal _high;
        
        private Guid _id;
        
        private decimal _low;
        
        private DateTime _marketDate;
        
        private decimal _open;
        
        private long _volume;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCloseChanging(decimal value);
        partial void OnCloseChanged();
        partial void OnHighChanging(decimal value);
        partial void OnHighChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLowChanging(decimal value);
        partial void OnLowChanged();
        partial void OnMarketDateChanging(DateTime value);
        partial void OnMarketDateChanged();
        partial void OnOpenChanging(decimal value);
        partial void OnOpenChanged();
        partial void OnVolumeChanging(long value);
        partial void OnVolumeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketData"/> class.
        /// </summary>
        public MarketData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Close' value.
        /// </summary>
        [DataMember()]
        public decimal Close
        {
            get
            {
                return this._close;
            }
            set
            {
                if ((this._close != value))
                {
                    this.OnCloseChanging(value);
                    this.RaiseDataMemberChanging("Close");
                    this.ValidateProperty("Close", value);
                    this._close = value;
                    this.RaiseDataMemberChanged("Close");
                    this.OnCloseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'High' value.
        /// </summary>
        [DataMember()]
        public decimal High
        {
            get
            {
                return this._high;
            }
            set
            {
                if ((this._high != value))
                {
                    this.OnHighChanging(value);
                    this.RaiseDataMemberChanging("High");
                    this.ValidateProperty("High", value);
                    this._high = value;
                    this.RaiseDataMemberChanged("High");
                    this.OnHighChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Low' value.
        /// </summary>
        [DataMember()]
        public decimal Low
        {
            get
            {
                return this._low;
            }
            set
            {
                if ((this._low != value))
                {
                    this.OnLowChanging(value);
                    this.RaiseDataMemberChanging("Low");
                    this.ValidateProperty("Low", value);
                    this._low = value;
                    this.RaiseDataMemberChanged("Low");
                    this.OnLowChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MarketDate' value.
        /// </summary>
        [DataMember()]
        public DateTime MarketDate
        {
            get
            {
                return this._marketDate;
            }
            set
            {
                if ((this._marketDate != value))
                {
                    this.OnMarketDateChanging(value);
                    this.RaiseDataMemberChanging("MarketDate");
                    this.ValidateProperty("MarketDate", value);
                    this._marketDate = value;
                    this.RaiseDataMemberChanged("MarketDate");
                    this.OnMarketDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Open' value.
        /// </summary>
        [DataMember()]
        public decimal Open
        {
            get
            {
                return this._open;
            }
            set
            {
                if ((this._open != value))
                {
                    this.OnOpenChanging(value);
                    this.RaiseDataMemberChanging("Open");
                    this.ValidateProperty("Open", value);
                    this._open = value;
                    this.RaiseDataMemberChanged("Open");
                    this.OnOpenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Volume' value.
        /// </summary>
        [DataMember()]
        public long Volume
        {
            get
            {
                return this._volume;
            }
            set
            {
                if ((this._volume != value))
                {
                    this.OnVolumeChanging(value);
                    this.RaiseDataMemberChanging("Volume");
                    this.ValidateProperty("Volume", value);
                    this._volume = value;
                    this.RaiseDataMemberChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'MarketSynthDomainService' DomainService.
    /// </summary>
    public sealed partial class MarketSynthDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketSynthDomainContext"/> class.
        /// </summary>
        public MarketSynthDomainContext() : 
                this(new WebDomainClient<IMarketSynthDomainServiceContract>(new Uri("MarketSynth-Services-MarketSynthDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketSynthDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MarketSynthDomainService service URI.</param>
        public MarketSynthDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMarketSynthDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MarketSynthDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MarketSynthDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Indicator"/> entity instances that have been loaded into this <see cref="MarketSynthDomainContext"/> instance.
        /// </summary>
        public EntitySet<Indicator> Indicators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Indicator>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MarketData"/> entity instances that have been loaded into this <see cref="MarketSynthDomainContext"/> instance.
        /// </summary>
        public EntitySet<MarketData> MarketDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MarketData>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PointData"/> entity instances that have been loaded into this <see cref="MarketSynthDomainContext"/> instance.
        /// </summary>
        public EntitySet<PointData> PointDatas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PointData>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Study"/> entity instances that have been loaded into this <see cref="MarketSynthDomainContext"/> instance.
        /// </summary>
        public EntitySet<Study> Studies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Study>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="StudyIndicator"/> entity instances that have been loaded into this <see cref="MarketSynthDomainContext"/> instance.
        /// </summary>
        public EntitySet<StudyIndicator> StudyIndicators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<StudyIndicator>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Indicator"/> entity instances using the 'GetIndicators' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Indicator"/> entity instances.</returns>
        public EntityQuery<Indicator> GetIndicatorsQuery()
        {
            this.ValidateMethod("GetIndicatorsQuery", null);
            return base.CreateQuery<Indicator>("GetIndicators", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MarketData"/> entity instances using the 'GetMarketData' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MarketData"/> entity instances.</returns>
        public EntityQuery<MarketData> GetMarketDataQuery()
        {
            this.ValidateMethod("GetMarketDataQuery", null);
            return base.CreateQuery<MarketData>("GetMarketData", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MarketData"/> entity instances using the 'GetMarketDataBySymbol' query.
        /// </summary>
        /// <param name="symbol">The value for the 'symbol' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MarketData"/> entity instances.</returns>
        public EntityQuery<MarketData> GetMarketDataBySymbolQuery(string symbol)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("symbol", symbol);
            this.ValidateMethod("GetMarketDataBySymbolQuery", parameters);
            return base.CreateQuery<MarketData>("GetMarketDataBySymbol", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PointData"/> entity instances using the 'GetPointData' query.
        /// </summary>
        /// <param name="instrument">The value for the 'instrument' parameter of the query.</param>
        /// <param name="indicator">The value for the 'indicator' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PointData"/> entity instances.</returns>
        public EntityQuery<PointData> GetPointDataQuery(string instrument, string indicator)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("instrument", instrument);
            parameters.Add("indicator", indicator);
            this.ValidateMethod("GetPointDataQuery", parameters);
            return base.CreateQuery<PointData>("GetPointData", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Study"/> entity instances using the 'GetStudies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Study"/> entity instances.</returns>
        public EntityQuery<Study> GetStudiesQuery()
        {
            this.ValidateMethod("GetStudiesQuery", null);
            return base.CreateQuery<Study>("GetStudies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="StudyIndicator"/> entity instances using the 'GetStudyIndicators' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="StudyIndicator"/> entity instances.</returns>
        public EntityQuery<StudyIndicator> GetStudyIndicatorsQuery()
        {
            this.ValidateMethod("GetStudyIndicatorsQuery", null);
            return base.CreateQuery<StudyIndicator>("GetStudyIndicators", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MarketSynthDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MarketSynthDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMarketSynthDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetIndicators' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MarketSynthDomainService/GetIndicatorsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MarketSynthDomainService/GetIndicators", ReplyAction="http://tempuri.org/MarketSynthDomainService/GetIndicatorsResponse")]
            [WebGet()]
            IAsyncResult BeginGetIndicators(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIndicators'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIndicators'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIndicators' operation.</returns>
            QueryResult<Indicator> EndGetIndicators(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMarketData' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MarketSynthDomainService/GetMarketDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MarketSynthDomainService/GetMarketData", ReplyAction="http://tempuri.org/MarketSynthDomainService/GetMarketDataResponse")]
            [WebGet()]
            IAsyncResult BeginGetMarketData(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMarketData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMarketData'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMarketData' operation.</returns>
            QueryResult<MarketData> EndGetMarketData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMarketDataBySymbol' operation.
            /// </summary>
            /// <param name="symbol">The value for the 'symbol' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MarketSynthDomainService/GetMarketDataBySymbolDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MarketSynthDomainService/GetMarketDataBySymbol", ReplyAction="http://tempuri.org/MarketSynthDomainService/GetMarketDataBySymbolResponse")]
            [WebGet()]
            IAsyncResult BeginGetMarketDataBySymbol(string symbol, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMarketDataBySymbol'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMarketDataBySymbol'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMarketDataBySymbol' operation.</returns>
            QueryResult<MarketData> EndGetMarketDataBySymbol(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPointData' operation.
            /// </summary>
            /// <param name="instrument">The value for the 'instrument' parameter of this action.</param>
            /// <param name="indicator">The value for the 'indicator' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MarketSynthDomainService/GetPointDataDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MarketSynthDomainService/GetPointData", ReplyAction="http://tempuri.org/MarketSynthDomainService/GetPointDataResponse")]
            [WebGet()]
            IAsyncResult BeginGetPointData(string instrument, string indicator, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPointData'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPointData'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPointData' operation.</returns>
            QueryResult<PointData> EndGetPointData(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStudies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MarketSynthDomainService/GetStudiesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MarketSynthDomainService/GetStudies", ReplyAction="http://tempuri.org/MarketSynthDomainService/GetStudiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetStudies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStudies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStudies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStudies' operation.</returns>
            QueryResult<Study> EndGetStudies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetStudyIndicators' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MarketSynthDomainService/GetStudyIndicatorsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MarketSynthDomainService/GetStudyIndicators", ReplyAction="http://tempuri.org/MarketSynthDomainService/GetStudyIndicatorsResponse")]
            [WebGet()]
            IAsyncResult BeginGetStudyIndicators(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetStudyIndicators'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetStudyIndicators'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetStudyIndicators' operation.</returns>
            QueryResult<StudyIndicator> EndGetStudyIndicators(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MarketSynthDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MarketSynthDomainService/SubmitChanges", ReplyAction="http://tempuri.org/MarketSynthDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MarketSynthDomainContextEntityContainer : EntityContainer
        {
            
            public MarketSynthDomainContextEntityContainer()
            {
                this.CreateEntitySet<Indicator>(EntitySetOperations.None);
                this.CreateEntitySet<MarketData>(EntitySetOperations.None);
                this.CreateEntitySet<PointData>(EntitySetOperations.None);
                this.CreateEntitySet<Study>(EntitySetOperations.Add);
                this.CreateEntitySet<StudyIndicator>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The 'PointData' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MarketSynth.Services")]
    public sealed partial class PointData : Entity
    {
        
        private DateTime _date;
        
        private double _frequency;
        
        private Guid _id;
        
        private double _point;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnFrequencyChanging(double value);
        partial void OnFrequencyChanged();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnPointChanging(double value);
        partial void OnPointChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PointData"/> class.
        /// </summary>
        public PointData()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Frequency' value.
        /// </summary>
        [DataMember()]
        public double Frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                if ((this._frequency != value))
                {
                    this.OnFrequencyChanging(value);
                    this.RaiseDataMemberChanging("Frequency");
                    this.ValidateProperty("Frequency", value);
                    this._frequency = value;
                    this.RaiseDataMemberChanged("Frequency");
                    this.OnFrequencyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Point' value.
        /// </summary>
        [DataMember()]
        public double Point
        {
            get
            {
                return this._point;
            }
            set
            {
                if ((this._point != value))
                {
                    this.OnPointChanging(value);
                    this.RaiseDataMemberChanging("Point");
                    this.ValidateProperty("Point", value);
                    this._point = value;
                    this.RaiseDataMemberChanged("Point");
                    this.OnPointChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Study' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MarketSynth.Services")]
    public sealed partial class Study : Entity
    {
        
        private Guid _id;
        
        private Guid _indicatorId;
        
        private string _instrumentName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnIndicatorIdChanging(Guid value);
        partial void OnIndicatorIdChanged();
        partial void OnInstrumentNameChanging(string value);
        partial void OnInstrumentNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Study"/> class.
        /// </summary>
        public Study()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IndicatorId' value.
        /// </summary>
        [DataMember()]
        public Guid IndicatorId
        {
            get
            {
                return this._indicatorId;
            }
            set
            {
                if ((this._indicatorId != value))
                {
                    this.OnIndicatorIdChanging(value);
                    this.RaiseDataMemberChanging("IndicatorId");
                    this.ValidateProperty("IndicatorId", value);
                    this._indicatorId = value;
                    this.RaiseDataMemberChanged("IndicatorId");
                    this.OnIndicatorIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InstrumentName' value.
        /// </summary>
        [DataMember()]
        public string InstrumentName
        {
            get
            {
                return this._instrumentName;
            }
            set
            {
                if ((this._instrumentName != value))
                {
                    this.OnInstrumentNameChanging(value);
                    this.RaiseDataMemberChanging("InstrumentName");
                    this.ValidateProperty("InstrumentName", value);
                    this._instrumentName = value;
                    this.RaiseDataMemberChanged("InstrumentName");
                    this.OnInstrumentNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'StudyIndicator' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/MarketSynth.Services")]
    public sealed partial class StudyIndicator : Entity
    {
        
        private Guid _id;
        
        private string _label;
        
        private string _pointData;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(Guid value);
        partial void OnIdChanged();
        partial void OnLabelChanging(string value);
        partial void OnLabelChanged();
        partial void OnPointDataChanging(string value);
        partial void OnPointDataChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="StudyIndicator"/> class.
        /// </summary>
        public StudyIndicator()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public Guid Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Label' value.
        /// </summary>
        [DataMember()]
        public string Label
        {
            get
            {
                return this._label;
            }
            set
            {
                if ((this._label != value))
                {
                    this.OnLabelChanging(value);
                    this.RaiseDataMemberChanging("Label");
                    this.ValidateProperty("Label", value);
                    this._label = value;
                    this.RaiseDataMemberChanged("Label");
                    this.OnLabelChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PointData' value.
        /// </summary>
        [DataMember()]
        public string PointData
        {
            get
            {
                return this._pointData;
            }
            set
            {
                if ((this._pointData != value))
                {
                    this.OnPointDataChanging(value);
                    this.RaiseDataMemberChanging("PointData");
                    this.ValidateProperty("PointData", value);
                    this._pointData = value;
                    this.RaiseDataMemberChanged("PointData");
                    this.OnPointDataChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
